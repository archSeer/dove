#!/usr/bin/env ruby
#/ Usage: dove [-o <dir>] <file>...
#/ Generate literate-programming-style documentation for Ruby source <file>s.
#/
#/ Options:
#/   -t, --template=<path>  The file to use as template when rendering HTML
#/       --help             Show this help message

require 'optparse'
require 'fileutils'
require_relative '../lib/dove'

# Write usage message to stdout and exit.
def usage(stream=$stderr, status=1)
  stream.puts File.readlines(__FILE__).
    grep(/^#\//).
    map { |line| line.sub(/^#. ?/, '') }.
    join
  exit status
end

# Like `Kernel#abort` but writes a note encouraging the user to consult
# `dove --help` for more information.
def abort_with_note(message=nil)
  $stderr.puts message if message
  abort "See `dove --help' for usage information."
end

# Parse command line options, aborting if anything goes wrong.
output_dir = '.'
sources = []
options = {}
ARGV.options { |o|
  o.program_name = File.basename($0)
  o.on("-o", "--output=DIR") { |dir| output_dir = dir }
  o.on("-t", "--template=TEMPLATE") { |template| options[:template_file] = template }
  o.on("-s", "--stylesheet=STYLESHEET") { |stylesheet| options[:stylesheet] = stylesheet }
  o.on_tail("-h", "--help") { usage($stdout, 0) }
  o.parse!
} or abort_with_note

# Eat sources from ARGV.
sources << ARGV.shift while ARGV.any?

# Make sure we have some files to work with.
if sources.empty?
  abort_with_note "#{File.basename($0)}: no input <file>s given"
end

# Run each file through Dove and write output.
sources.each do |filename|
  dove = Dove.new(filename, options)
  dest = filename.sub(Regexp.new("#{File.extname(filename)}$"),".html")
  dest = File.join(output_dir, dest) if output_dir != '.'
  puts "dove: #{filename} -> #{dest}"
  FileUtils.mkdir_p File.dirname(dest)
  File.open(dest, 'wb') { |fd| fd.write(dove.render) }
end