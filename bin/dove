#!/usr/bin/env ruby
#/ Usage: dove [-o <dir>] <file>...
#/ Generate web documents from Markdown <file>s. Glob patterns can be used.
#/
#/ Options:
#/   -t, --template=<path>  Specify the file to use as template
#/   -w, --watch            Watch for file changes and rebuild
#/       --help             Show this help message

require 'optparse'
require 'fileutils'
require 'dove'

# Write usage message to stdout and exit.
def usage(stream=$stderr, status=1)
  stream.puts File.readlines(__FILE__).
    grep(/^#\//).
    map { |line| line.sub(/^#. ?/, '') }.
    join
  exit status
end

# Like `Kernel#abort` but writes a note encouraging the user to consult
# `dove --help` for more information.
def abort_with_note(message=nil)
  $stderr.puts message if message
  abort "See `dove --help' for usage information."
end

# Generate the file and write it to output dir.
def build(filename, options)
  dove = Dove.new(filename, options)
  dest = "#{File.basename(filename, '.*')}.html"
  dest = File.join(options[:output_dir], dest) if options[:output_dir] != '.'
  puts "dove: #{Time.now.strftime("%Y-%m-%d %H:%M:%S")} #{filename} -> #{dest}"
  FileUtils.mkdir_p File.dirname(dest)
  File.open(dest, 'wb') { |fd| fd.write(dove.render) }
end

# Parse command line options, aborting if anything goes wrong.
sources = []
options = {:output_dir => '.'}
ARGV.options { |o|
  o.program_name = File.basename($0)
  o.on("-o", "--output=DIR")            { |dir| options[:output_dir] = dir }
  o.on("-t", "--template=TEMPLATE")     { |template| options[:template_file] = template }
  o.on("-s", "--stylesheet=STYLESHEET") { |stylesheet| options[:stylesheet] = stylesheet }
  o.on("-w", "--watch")                 { options[:watch] = true }
  o.on_tail("-h", "--help")             { usage($stdout, 0) }
  o.parse!
} or abort_with_note

# Eat sources from ARGV.
sources.push(*Dir[ARGV.shift]) while ARGV.any?

# Make sure we have some files to work with.
if sources.empty?
  abort_with_note "#{File.basename($0)}: no input <file>s given"
end

# Run each file through Dove and write output.
sources.each do |filename|
  build(filename, options)
end

def watch(files, options)
  require 'directory_watcher'

  dw = DirectoryWatcher.new('.', glob: files, pre_load: true, interval: 1)

  dw.add_observer do |*args|
    args.each { |event| build(event.path, options) }
  end

  dw.start

  trap("INT") do
    puts "dove: flew away"
    exit 0
  end
  loop { sleep 1000 }
end

# Start the watcher if the watch option was enabled.
watch(sources, options) if options[:watch]